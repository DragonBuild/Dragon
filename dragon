#!/usr/bin/env bash

# Load in the bare minimum


SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

source $DIR/internal/data/environment

# Cant distinctly remember, but IIRC this framework is actually 
#    just a bash script we load in
source /System/Library/Frameworks/DragonSupport.framework/DragonSupport 2>/dev/null

# Connection timeout for SSH stuff
DBTIMEOUT=5

# Load in colors and basic functions
source $DRAGONBUILD/internal/tools/util

# Tool imports
source $DRAGONBUILD/internal/tools/simulator 
source $DRAGONBUILD/internal/tools/packaging 
source $DRAGONBUILD/internal/tools/building 

# These are the flags for the "state" of the program
# Consider it a "checklist". Anything that gets set to 1 is something we need to get done,
#     in the proper order.
install=0
build=0
gen=0
clean=0
exportt=0
only=0
norm=0
debug=0
debugproc=""
ddebug=0
flutter=0
DRAGON_DPKG=1
DRAGON_POSTINST=0

export simtarg=0

export release=0

ToolchainPath=""
ToolchainPrefix=""
command -v dsymutil >/dev/null || export ToolchainPath="${DRAGONBUILD}/toolchain/bin/"; export ToolchainPrefix="";

set -o pipefail

# This controls ninja colors.
export NINJA_STATUS="\x1b[34m[Dragon] [%f/%t] (%e)"


if [ "$1" == "" ]; then
    usage
    drexit
fi

# Argument Parsing
# Set a variable here or call a bash function if it's atool

while [ "$1" != "" ]; do
    case $1 in

        # Set Variables

        do )                    gen=1
                                build=1
                                install=1
                                ;;
        g | gen | generate)     gen=1
                                ;;
        n | nic | new)          python3 $DRAGONBUILD/bin/nic.py  
                                drexit
                                ;;
        exp | export)           gen=1
                                exportt=1
                                build=1
                                ;;
        norm )                  norm=1
                                ;;
        b | build | make)       gen=1
                                build=1
                                ;;
        sim | simulator )       export simtarg=1
                                ;;
        i | install )           gen=1
                                install=1
                                ;;
        f | flutter )           flutter=1
                                ;;
        debug )                 debug=1
                                shift
                                debugproc="$1"
                                ;;
        ddebug )                NINJA_ARGS="-v"
                                export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
                                set -xv
                                export DGEN_DEBUG=1
                                ;;
        only )                  only=1
                                ;;
        c | clean )             clean=1
                                ;;
        vn )                    NINJA_ARGS="-v"
                                ;;
        vd )                    export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
                                set -xv
                                ;;
        vg )                    export DGEN_DEBUG=1
                                ;;

        # Commands

        u | update )            update
                                drexit
                                ;;
        rs | respring )         python3 $DRAGONBUILD/internal/tools/device.py run killall -9 SpringBoard
                                drexit
                                ;;
        dr | devicerun )        shift
                                python3 $DRAGONBUILD/internal/tools/device.py run $*
                                drexit
                                ;;
        s | device)             python3 $DRAGONBUILD/internal/tools/device.py setup
                                ;;
        sr | rconf )            setupRemote
                                ;;
        sn | send )             snd $2
                                drexit
                                ;;
        ch | checkra1n )        /Applications/checkra1n.app/Contents/MacOS/checkra1n -g
                                drexit
                                ;;
        chc | checkra1ncli )    /Applications/checkra1n.app/Contents/MacOS/checkra1n -c
                                drexit
                                ;;
        r | remote )            shift
                                bash $DRAGONBUILD/internal/tools/remote $*
                                drexit
                                ;;
        relink )                rm .dragon/sign
                                ;;
        h | help | -h )         usage
                                drexit
                                ;;
        test )                  python3 $DRAGONBUILD/internal/tools/test.py
                                drexit
                                ;;
        time )                  N=`date +%s%N`; export PS4='+[$(((`date +%s%N`-$N)/1000000))ms][${BASH_SOURCE}:${LINENO}]: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }';
                                set -x
                                ;;
        v | -v )                cat $DRAGONBUILD/internal/branding/banner.txt 
                                ;;
        * )                     usage
                                drexit 1

    esac # who comes up with this syntax lol
    shift
done

cwd=$(basename $PWD)

if [ $gen == 1 ]; then 
    # DragonGen.py
    rm -rf .dragon/ninja/build.ninja 
    mkdir -p .dragon/ninja > /dev/null
    mkdir -p .dragon/modules > /dev/null

    source $DRAGONBUILD/DragonGen/DragonGen $DGEN_DEBUG

    if [ "$DRAGONGEN_FAILURE" == 1 ]; then
        cleanbuildfail
    fi
fi

if [ $build == 1 ]; then 
    # build.py
    # shellcheck disable=SC2154
    
    projroot=$PWD

    set -f
    # If there's more than one project in the root directory we need to iterate by name.
    # shellcheck disable=SC2207
    subsb=($(python3 -c "print('${project_dirs}' if ('${project_dirs}'.count('.')<2) else '${project_names}')"))
    set +f

    for i in ${subsb[@]}; do
        build $i            
    done

    if [ $DRAGON_DPKG == 1 ]; then
        create_package
    fi

    echo -e "${PrefixColor}[Dragon]${BoldColor} Cleaning Up"
fi

if [ $install == 1 ] && [ $DRAGON_DPKG == 1 ]; then
    OUTPUT="$(cat .dragon/last_package | tr -d '\040\011\012\015' )"

    if [ -z "$OUTPUT" ]; then
        echo -e "${PrefixColor}[Dragon]${BoldColor} Packaging Failed${NC}"
        drexit
    fi
    
    send_package packages/$OUTPUT

    echo -e "${PrefixColor}[Dragon]${BoldColor} Running '${INSTALL_CMD}' ${NC}"
    python3 $DRAGONBUILD/internal/tools/device.py run ${INSTALL_CMD} || drexit
fi
 
if [ $debug == 1 ] ; then
    eval $(python3 $DRAGONBUILD/internal/tools/device.py get)
    echo -e "${PrefixColor}[Dragon]${BoldColor} Starting on device debugger and targeting '$debugproc' ${NC}"
    ssh -p $DRBPORT root@$DRBIP "command -v lldb || apt-get install lldb" || drexit
    ssh -p $DRBPORT root@$DRBIP "lldb -n $debugproc" || ssh -p $DRBPORT root@$DRBIP "killall lldb"
fi

rm -rf .dragon/packages > /dev/null
set +xv